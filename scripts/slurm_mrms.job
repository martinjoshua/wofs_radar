#!/usr/bin/env python

#-----------------------------------------------------------------------
#
# Documentation
#
# This script is processes a special MRMS grid created for WoFs 
# which has already been superobbed to 5 km.  It then sub-sections
# that CONUS grid into the grid needed for the smaller WoFs grid,
# and writes it out to a netCDF that GSI can read.
#
#
# 06/24/2019-LJW:  Fixed code so that the radar file and directory
#                  are set to the run day by subtracting 12 hours
#                  from the GMT time supplied.
#                  This is done using "_hour_offset" variable
#-----------------------------------------------------------------------

#SBATCH --ntasks-per-node=4
#SBATCH --nodes=1
#SBATCH -J slurm_rt_mrms
#SBATCH -o rt_mrms.out
#SBATCH -e rt_mrms.error
#SBATCH -t 00:59:00

### Note that -a <account> and -p <partition> are not in there. This will change when accounting is turned on.

import matplotlib
matplotlib.use('Agg')
import time
import logging
import os, sys
import datetime as DT
import calendar
from optparse import OptionParser

# Import wofs_dirs to tell you where things are....
from wofs_dirs import _MRMS_feed, _MRMS_obs_seq, _MRMS_log, _WOFS_grid_info, _prep_mrms

# Where stuff is or is going...
#_MRMS_feed       = "/scratch/LDM/MRMS"
#_MRMS_obs_seq    = "/scratch/wicker/REALTIME/REF"
#_MRMS_log        = "/scratch/wicker/REALTIME/REF/logs"
#_WOFS_grid_info  = "/scratch/wof/realtime/radar_files"
#_prep_mrms       = "/work/wicker/REALTIME/WOFS_radar/pyMRMS/prep_mrms.py"

delta_time       = DT.timedelta(minutes=15)
one_second       = DT.timedelta(seconds=1)
plot_level       = 3

_hour_offset = 12

# Okay guts of the code
#-------------------------------------------------------------------------------
# This is a handy function to make sure we get the correct day for radar file
#      I.E., we need to figure out what day it is, even if UTC is after 00Z

def utc_to_local(utc_dt):
    # get integer timestamp to avoid precision lost
    timestamp = calendar.timegm(utc_dt.timetuple())
    local_dt = DT.datetime.fromtimestamp(timestamp)
    assert utc_dt.resolution >= DT.timedelta(microseconds=1)
    return local_dt.replace(microsecond=utc_dt.microsecond) - DT.timedelta(hours=_hour_offset)

#-------------------------------------------------------------------------------
# Function to actually run the prep_mrms.py script

def process_mrms(utc_time):

    # Log files are labeled on the local day, not UTC
#   local_time   = utc_to_local(DT.datetime.strptime(utc_time, "%Y%m%d%H%M"))
    local_time   = DT.datetime.strptime(utc_time, "%Y%m%d%H%M") - DT.timedelta(hours=_hour_offset)

    log_filename = os.path.join(_MRMS_log, "prepMRMS_%s.log" % local_time.strftime("%Y%m%d"))
    log_h        = open(log_filename,"a")  # handle for the log file (one per day)

    try:
        mrms_time = DT.datetime.strptime(utc_time, "%Y%m%d%H%M")
        log_h.write("\n ============================================================================")
        log_h.write("\n Processing:  %s for WoFS system" % mrms_time.strftime("%Y%m%d%H%M"))
        log_h.write("\n ============================================================================\n")
    except:
        log_h.write("\n ============================================================================")
        log_h.write("\n CANNOT process command line supplied YYYYMMDDHHMM:  %s" % date_time)
        log_h.write("\n No observational file created EXITING.....")
        log_h.write("\n ============================================================================")
        sys.exit(1)

    # create path to WOFS radar file
    # This method assumes that radar data will only be parsed up to 11:59 PM local time -
    #      so we convert the input UTC time to local time...
    radar_csh_file = os.path.join(_WOFS_grid_info, ("radars.%s.csh" % local_time.strftime("%Y%m%d")))

    # we put obs into local day directories, so use the local time
    obs_seq_out_dir = os.path.join(_MRMS_obs_seq, local_time.strftime("%Y%m%d"))

# Parse center lat and lon out of the c-shell radar file - HARDCODED!
# If the file does not exist, then we exit out of this run

    try:
        fhandle = open(radar_csh_file)
    except:
        log_h.write("\n ============================================================================")
        log_h.write("\n CANNOT OPEN radar CSH file, exiting MRMS processing:  %s" % radar_csh_file)
        log_h.write("\n ============================================================================")
        sys.exit(1)

    all_lines  = fhandle.readlines()
    lat = float(all_lines[7].split(" ")[2])
    lon = float(all_lines[8].split(" ")[2])
    fhandle.close()

    log_h.write("\n ============================================================================")
    log_h.write("\n Lat: %f  Lon: %f centers will be used for MRMS sub-domain" % (lat, lon))
    log_h.write("\n ============================================================================")

    MRMS_dir = os.path.join(_MRMS_feed, mrms_time.strftime("%Y/%m/%d"))

    log_h.write("\n Reading from operational MRMS directory:  %s\n" % MRMS_dir)

    log_h.write("\n >>>>=======BEGIN===============================================================")
    cmd = "%s -d %s -w -o %s --realtime %s -p %d --loc %f %f"  %  \
          (_prep_mrms, MRMS_dir, obs_seq_out_dir, mrms_time.strftime("%Y%m%d%H%M"), plot_level, lat, lon)
#     cmd = "%s -d %s -w -o %s --realtime %s --loc %f %f"  %  \
#           (_prep_mrms, MRMS_dir, obs_seq_out_dir, mrms_time.strftime("%Y%m%d%H%M"), lat, lon)

    log_h.write("\n Prep_MRMS called at %s" % (time.strftime("%Y-%m-%d %H:%M:%S")))
    log_h.write(" Cmd: %s" % (cmd))

    ret = os.system("%s" % cmd)

    if ret != 0:
        log_h.write("\n ============================================================================")
        log_h.write("\n Prep_MRMS cannot find a RF file between [-2,+1] min of %s" % mrms_time.strftime("%Y%m%d%H%M"))
        log_h.write("\n ============================================================================")
    log_h.write("\n <<<<<=======END================================================================")

    log_h.close()


#-------------------------------------------------------------------------------
# Main function defined to return correct sys.exit() calls

def main(argv=None):

#
# Command line interface
#
    parser = OptionParser()
    parser.add_option("-s", "--start", dest="start", default=None,  type="string", help = "YYYYMMDDHHMM to process mrms")
    parser.add_option("-e", "--end",   dest="end", default=None,  type="string", help = "YYYYMMDDHHMM end time")

    (options, args) = parser.parse_args()

    if options.start == None:   # this is an error, always have to have one time
         print("\n ============================================================================")
         print("\n CANNOT process command line, no start time given")
         print("\n No observational file created EXITING.....")
         print("\n ============================================================================")
         sys.exit(1)

# Make sure there is a directory to write files into....

    if not os.path.exists(_MRMS_log):
        try:
            os.makedirs(_MRMS_log)
        except:
            print("\n ============================================================================")
            print("\nSLURM_MRMS  Cannot create output dir:  %s\n" % _MRMS_log)
            print("\n ============================================================================")
            sys.exit(1)

    if not os.path.exists(_MRMS_obs_seq):
        try:
            os.makedirs(_MRMS_obs_seq)
        except:
            print("\n ============================================================================")
            print("\nSLURM_MRMS  Cannot create output dir:  %s\n" % _MRMS_obs_seq)
            print("\n ============================================================================")
            sys.exit(1)

    if options.end == None:     # only the start time given, the process a single time
         process_mrms(options.start)

    else:                       # if both start and end prescribed, assume that user wants to create a series of files
         start_time = DT.datetime.strptime(options.start, "%Y%m%d%H%M")
         stop_time  = DT.datetime.strptime(options.end,   "%Y%m%d%H%M") + one_second  # in case start==end

         while start_time < stop_time:

             process_mrms(start_time.strftime("%Y%m%d%H%M"))   # process_mrms() expecting a string..

             start_time = start_time + delta_time              # step to next process time (usually 10-15 min)

#
#-------------------------------------------------------------------------------
# Main program for testing...
#
if __name__ == "__main__":
    sys.exit(main())
